varying mediump vec4 texCoord;
uniform sampler2D diffuse_texture;
uniform sampler2D outline_texture;
uniform sampler2D bloom_texture;
uniform sampler2D edge_texture;
uniform highp float mod_vibrance;
uniform highp sampler2D vibrance_ramp;
uniform highp float bloom_strength;
lowp vec3 rgb2hsv(vec3 c){
lowp vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
lowp vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
lowp vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
lowp float d = q.x - min(q.w, q.y);
lowp float e = 1.0e-10;
return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);}
  const lowp vec3 LumCoeff = vec3(0.2125, 0.7154, 0.0721);
  lowp vec3 greyScale(lowp vec3 color) {
  return vec3(dot(color, LumCoeff)); }
lowp vec3 AdjustVibrance(lowp vec3 color, lowp float strength)	{
  lowp vec3 AvgLumin = vec3(0.5);
  lowp vec3 intensity = greyScale(color);
  lowp float saturation = rgb2hsv(color).y;
  lowp float vibranceScale = texture2D(vibrance_ramp, vec2(saturation, 0.5)).r;
  lowp vec3 satColor = mix(intensity, color, strength * vibranceScale);
return satColor;	}
	varying mediump vec2 v_rgbNW;
	varying mediump vec2 v_rgbNE;
	varying mediump vec2 v_rgbSW;
	varying mediump vec2 v_rgbSE;
	varying mediump vec2 v_rgbM;
	uniform vec2 resolution;
	const float FXAA_REDUCE_MIN  = (1.0/ 128.0);
	const float FXAA_REDUCE_MUL  = (1.0 / 8.0);
	const float FXAA_SPAN_MAX    = 8.0;
	void main()	{
    lowp vec4 output_color; 
    lowp vec2 output_uv = texCoord.xy; 
    mediump vec2 fragCoord = output_uv*resolution;
    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);
    vec3 rgbNW = texture2D(diffuse_texture, v_rgbNW).xyz;
    vec3 rgbNE = texture2D(diffuse_texture, v_rgbNE).xyz;
    vec3 rgbSW = texture2D(diffuse_texture, v_rgbSW).xyz;
    vec3 rgbSE = texture2D(diffuse_texture, v_rgbSE).xyz;
    vec3 rgbM  = texture2D(diffuse_texture, v_rgbM).xyz;
    vec3 luma = vec3(0.299, 0.587, 0.114);
    float lumaNW = dot(rgbNW, luma);
    float lumaNE = dot(rgbNE, luma);
    float lumaSW = dot(rgbSW, luma);
    float lumaSE = dot(rgbSE, luma);
    float lumaM  = dot(rgbM,  luma);
    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
    mediump vec2 dir;
    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX), max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * inverseVP;
    vec3 rgbA = 0.5 * (
    texture2D(diffuse_texture, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +
    texture2D(diffuse_texture, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);
    vec3 rgbB = rgbA * 0.5 + 0.25 * (
    texture2D(diffuse_texture, fragCoord * inverseVP + dir * -0.5).xyz +
    texture2D(diffuse_texture, fragCoord * inverseVP + dir * 0.5).xyz);
    float lumaB = dot(rgbB, luma);
    if ((lumaB < lumaMin) || (lumaB > lumaMax))
      output_color = vec4(rgbA, 1.0);
    else
        output_color = vec4(rgbB, 1.0);
  lowp vec4 outline_color = texture2D(outline_texture, output_uv); 
  lowp float edge_value = texture2D(edge_texture, output_uv).r; 
  outline_color.rgb = mix(outline_color.rgb, output_color.rgb, edge_value);
  output_color.rgb = mix(output_color.rgb, outline_color.rgb, outline_color.a);
  output_color.rgb = AdjustVibrance(output_color.rgb, mod_vibrance);
  lowp vec3 bloom_color = bloom_strength *texture2D(bloom_texture, output_uv).rgb;
  output_color.rgb = 1.0 - ((1.0 - output_color.rgb) * (1.0 - bloom_color));
    gl_FragColor = output_color;}