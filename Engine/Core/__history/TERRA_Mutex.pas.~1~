Unit TERRA_Mutex;

{$I terra.inc}
Interface
Uses TERRA_Utils, TERRA_Log,
{$IFDEF WINDOWS}Windows
{$ELSE}cmem, ctypes,baseunix,unixtype{$ENDIF};

{$IFNDEF WINDOWS}
Type
 ppthread_mutex_t = ^pthread_mutex_t;
 ppthread_mutexattr_t = ^pthread_mutexattr_t;

Const
  MutexLib = 'libc.so';

Function pthread_mutex_init(__mutex:ppthread_mutex_t; __mutex_attr:ppthread_mutexattr_t):longint; cdecl; External MutexLib;
Function pthread_mutex_destroy(__mutex:ppthread_mutex_t):longint; Cdecl; External MutexLib;
Function pthread_mutex_lock(__mutex: ppthread_mutex_t):longint; Cdecl; External MutexLib;
Function pthread_mutex_unlock(__mutex: ppthread_mutex_t):longint; Cdecl; External MutexLib;
{$ENDIF}

Type
  CriticalSection = Class
    Protected
      _Name:AnsiString;
      {$IFDEF WINDOWS}
      _Handle:TRTLCriticalSection;
      {$ELSE}
      _Handle:pthread_mutex_t;
      {$ENDIF}

    Public
      Constructor Create(Name:AnsiString);
      Destructor Destroy; Reintroduce;

      Procedure Lock;
      Procedure Unlock;
  End;

Implementation

Constructor CriticalSection.Create(Name:AnsiString);
Begin
  _Name := Name;
{$IFDEF WINDOWS}
	InitializeCriticalSection(_Handle);
{$ELSE}
  pthread_mutex_init(@_Handle, Nil);
{$ENDIF}
End;

Destructor CriticalSection.Destroy;
Begin
{$IFDEF WINDOWS}
	DeleteCriticalSection(_Handle);
{$ELSE}
  pthread_mutex_destroy(@_Handle);
{$ENDIF}
End;

Procedure CriticalSection.Lock;
Begin
{$IFDEF WINDOWS}
  {$IFDEF DEBUG}
  If (_Name<>'') Then
    WriteLn(_Name,'.Lock() - '+IntToString(GetCurrentThread()));
  {$ENDIF}
	EnterCriticalSection(_Handle);
{$ELSE}
  pthread_mutex_lock(@_Handle);
{$ENDIF}
End;

Procedure CriticalSection.Unlock;
Begin
{$IFDEF WINDOWS}
  {$IFDEF DEBUG}
  If (_Name<>'') Then
    WriteLn(_Name,'.Unlock() - '+IntToString(GetCurrentThread()));
  {$ENDIF}
	LeaveCriticalSection(_Handle);
{$ELSE}
  pthread_mutex_unlock(@_Handle);
{$ENDIF}
End;

End.